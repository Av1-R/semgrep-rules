rules:
  - id: java-jwt-none-alg
    message: Detected use of the 'none' algorithm in a JWT token. The 'none'
      algorithm assumes the integrity of the token has already been verified.
      This would allow a malicious actor to forge a JWT token that will
      automatically be verified. Do not explicitly use the 'none' algorithm.
      Instead, use an algorithm such as 'HS256'.
    metadata:
      cwe:
        - "CWE-327: Use of a Broken or Risky Cryptographic Algorithm"
      owasp:
        - A03:2017 - Sensitive Data Exposure
        - A02:2021 - Cryptographic Failures
      source-rule-url: https://semgrep.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/
      category: security
      technology:
        - jwt
      confidence: HIGH
      references:
        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures
      subcategory:
        - vuln
      likelihood: HIGH
      impact: MEDIUM
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Cryptographic Issues
    languages:
      - java
    severity: ERROR
    pattern-either:
      - pattern: |
          $JWT.sign(com.auth0.jwt.algorithms.Algorithm.none());
      - pattern: |
          $NONE = com.auth0.jwt.algorithms.Algorithm.none();
          ...
          $JWT.sign($NONE);
      - pattern: |-
          class $CLASS {
            ...
            $TYPE $NONE = com.auth0.jwt.algorithms.Algorithm.none();
            ...
            $RETURNTYPE $FUNC (...) {
              ...
              $JWT.sign($NONE);
              ...
            }
            ...
          }

  - id: java-jwt-hardcoded-secret
    message: A hard-coded credential was detected. It is not recommended to store
      credentials in source-code, as this risks secrets being leaked and used by
      either an internal or external malicious adversary. It is recommended to
      use environment variables to securely provide credentials or retrieve
      credentials from a secure vault or HSM (Hardware Security Module).
    metadata:
      cwe:
        - "CWE-798: Use of Hard-coded Credentials"
      references:
        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_Cheat_Sheet.html
      owasp:
        - A07:2021 - Identification and Authentication Failures
      technology:
        - java
        - secrets
        - jwt
      category: security
      cwe2022-top25: true
      cwe2021-top25: true
      subcategory:
        - vuln
      likelihood: LOW
      impact: MEDIUM
      confidence: HIGH
      license: Commons Clause License Condition v1.0[LGPL-2.1-only]
      vulnerability_class:
        - Hard-coded Secrets
    languages:
      - java
    severity: WARNING
    patterns:
      - pattern-either:
          - pattern: |
              (Algorithm $ALG) = $ALGO.$HMAC("$Y");
          - pattern: |
              $SECRET = "$Y";
              ...
              (Algorithm $ALG) = $ALGO.$HMAC($SECRET);
          - pattern: |
              class $CLASS {
                ...
                $TYPE $SECRET = "$Y";
                ...
                $RETURNTYPE $FUNC (...) {
                  ...
                  (Algorithm $ALG) = $ALGO.$HMAC($SECRET);
                  ...
                }
                ...
              }
      - focus-metavariable: $Y
      - metavariable-regex:
          metavariable: $HMAC
          regex: (HMAC384|HMAC256|HMAC512)
